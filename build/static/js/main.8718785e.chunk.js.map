{"version":3,"sources":["store/home/reducer.js","store/info/reducer.js","store/index.js","store/info/actionType.js","util/asyncComponent.js","router/index.js","serviceWorker.js","index.js"],"names":["defaultStore","data","list","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","combineReducers","info","state","action","type","GETINFOLIST","newState","home","asyncComponent","importComponent","props","component","default","this","setState","C","Component","routerList","path","exact","AsyncComponent","RouteConfig","map","item","index","key","to","Boolean","location","hostname","match","FastClick","attach","document","body","Route","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wHACMA,EAAe,CACjBC,KAAO,QACPC,KAAK,I,gBCDHF,EAAe,CACjBC,KAAO,GACPC,KAAK,ICKHC,GAJmBC,OAAOC,qCAC5BD,OAAOC,qCAAqC,IAC5CC,KAE8BC,YAAgBC,MAE5CC,EAAQC,YACZC,YAAgB,CAAEC,KDLL,WAAgC,IAA/BC,EAA8B,uDAAtBb,EAAac,EAAS,uCAC1C,GAAGA,EAAOC,OAASC,IAAY,CAE3B,IAAIC,EAAQ,eAAOJ,GAEnB,OADAI,EAAShB,KAAOa,EAAOb,KAChBgB,EAEX,OAAOJ,GCFeK,KFNX,WAAgC,IAA/BL,EAA8B,uDAAtBb,EAAsB,iCAE1C,OAAOa,KEKTV,GAGaM,O,gCChBf,kCAAO,IAAOO,EAAc,iB,sOCEb,SAASG,EAAeC,GAuBrC,OAvBsD,YAEpD,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDR,MAAQ,CACXS,UAAW,MAJI,EAFiC,mNAWbF,IAXa,gBAWjCE,EAXiC,EAW1CC,QAERC,KAAKC,SAAS,CAACH,cAbmC,qIAiBlD,IAAMI,EAAIF,KAAKX,MAAMS,UAErB,OAAOI,EAAI,kBAACA,EAAMF,KAAKH,OAAY,SAnBe,GACzBM,a,UCezBC,EAAa,CACf,CAAEC,KAAM,IAAKC,OAAO,EAAMR,UAPjBS,GAAe,kBAAM,6EAQ9B,CAAEF,KAAM,YAAaC,OAAO,EAAOR,UAPtBS,GAAe,kBAAM,sEAQlC,CAAEF,KAAM,QAASC,OAAO,EAAOR,UAPnBS,GAAe,kBAAM,sEAQjC,CAAEF,KAAM,QAASC,OAAO,EAAOR,UAPtBS,GAAe,kBAAM,gEAQ9B,CAAEF,KAAM,MAAOC,OAAO,EAAOR,UAPtBS,GAAe,kBAAM,iEAmCfC,E,iLApBX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACGJ,EAAWK,KAAI,SAACC,EAAMC,GACrB,OACE,kBAAC,IAAD,CACEC,IAAKD,EACLN,KAAMK,EAAKL,KACXC,MAAOI,EAAKJ,MACZR,UAAWY,EAAKZ,eAItB,kBAAC,IAAD,CAAUe,GAAG,Y,GAfGV,a,wBCjBRW,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2D,MCTNC,IAAUC,OAAOC,SAASC,MAC1B,IAAelB,IAWNmB,EAVLC,IAASC,OACP,kBAAC,IAAD,CAAUvC,MAAOA,KACf,kBAAC,eAAD,KACE,kBAACkB,EAAD,QAGJiB,SAASK,eAAe,SDkHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8718785e.chunk.js","sourcesContent":["\r\nconst defaultStore = {\r\n    data : \"32131\",\r\n    list:[ ]\r\n}\r\n\r\nexport default (state = defaultStore,action)=>{\r\n\r\n    return state\r\n}","import { GETINFOLIST ,CHANGEINFOLIST} from './actionType'\r\n\r\nconst defaultStore = {\r\n    data : {},\r\n    list:[ ]\r\n}\r\n\r\nexport default (state = defaultStore,action)=>{\r\n    if(action.type === GETINFOLIST){\r\n        // let newState = JSON.parse(JSON.stringify(state))\r\n        let newState = {...state}\r\n        newState.data = action.data;\r\n        return newState\r\n    }\r\n    return state\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport home from \"./home/reducer\";\r\nimport info from \"./info/reducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n  ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({})\r\n  : compose;\r\n\r\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\r\n// combineReducers的作用是将多个reducer文件合并成一个reducer文件\r\nconst store = createStore(\r\n  combineReducers({ info ,home }),\r\n  enhancer\r\n);\r\n\r\nexport default store;","export const  GETINFOLIST = 'get_info_list';\r\nexport const  CHANGEINFOLIST = 'change_info_list';","import React, { Component } from \"react\";\r\n\r\nexport default function asyncComponent(importComponent) {\r\n  class AsyncComponent extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: null\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n\r\n      this.setState({component});\r\n    }\r\n\r\n    render() {\r\n      const C = this.state.component;\r\n\r\n      return C ? <C {...this.props} /> : null;\r\n    }\r\n  }\r\n\r\n  return AsyncComponent;\r\n}","// 配置路由\r\n\r\nimport React, { Component } from \"react\";\r\n// 路由依赖\r\nimport { HashRouter, Switch, Redirect, Route } from \"react-router-dom\";\r\n// 异步组件\r\nimport AsyncComponent from \"../util/asyncComponent\";\r\n\r\n// 引入共同的样式问题\r\nimport \"../common/less/base.css\";\r\n\r\n// 组件页面\r\nconst Home = AsyncComponent(() => import(\"../pages/home\"));\r\nconst Category = AsyncComponent(() => import(\"../pages/category\"));\r\nconst Message = AsyncComponent(() => import(\"../pages/info\"));\r\nconst Cart = AsyncComponent(() => import(\"../pages/cart\"));\r\nconst My = AsyncComponent(() => import(\"../pages/my\"));\r\n\r\nconst routerList = [\r\n    { path: \"/\", exact: true, component: Home },\r\n    { path: \"/category\", exact: false, component: Category },\r\n    { path: \"/info\", exact: false, component: Message },\r\n    { path: \"/cart\", exact: false, component: Cart },\r\n    { path: \"/my\", exact: false, component: My }\r\n\r\n];\r\n\r\n\r\n\r\n  class RouteConfig extends Component {\r\n    render() {\r\n      return (\r\n        <HashRouter>\r\n          <Switch>\r\n            {routerList.map((item, index) => {\r\n              return (\r\n                <Route\r\n                  key={index}\r\n                  path={item.path}\r\n                  exact={item.exact}\r\n                  component={item.component}\r\n                />\r\n              );\r\n            })}\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </HashRouter>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default RouteConfig;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport FastClick from \"fastclick\";\nimport Route from \"./router\";\nimport { AppContainer } from \"react-hot-loader\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport * as serviceWorker from './serviceWorker';\nimport 'antd-mobile/dist/antd-mobile.css';\nFastClick.attach(document.body);\nconst render = Component => {\n    ReactDOM.render(\n      <Provider store={store}>\n        <AppContainer>\n          <Component />\n        </AppContainer>\n      </Provider>,\n      document.getElementById(\"root\")\n    );\n  };\n  \n  render(Route);\n  \n  if (module.hot) {\n    module.hot.accept(\"./router\", () => {\n      render(Route);\n    });\n  }\n\nserviceWorker.unregister();\n"],"sourceRoot":""}