{"version":3,"sources":["components/CategoryList/index.js","pages/category.js","api/server.js","api/index.js"],"names":["CategoryList","props","state","cateListData","cateList","type","this","setState","data","className","map","item","index","key","id","list","item1","index1","title","item2","index2","src","img","alt","subTitle","price","oldPrice","Component","Category","navList","name","onClick","checkNav","bind","post","url","params","Promise","resolve","reject","axios","QS","stringify","then","res","catch","err","defaults","baseURL","timeout","headers","interceptors","request","use","config","token","Authorization","error","response","status","code","Toast","fail","setTimeout","offline","swipeList","activeList","hotSaleList","linkList"],"mappings":"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","file":"static/js/8.9b3dac2f.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport \"./index.css\"\r\nimport {cateList} from \"../../api/index\";\r\nclass CategoryList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            cateListData:[]\r\n         }\r\n    }\r\n    async componentDidMount(){\r\n        let cateListData = await cateList({type:\"cateList\"});\r\n        this.setState({\r\n            cateListData:cateListData.data.cateList\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"categorylist\">\r\n                {this.state.cateListData.map((item,index)=>{\r\n                    return(\r\n                        <Fragment key={item.id}>\r\n                            {this.props.id === item.id && (\r\n                            <Fragment key={item.id}>\r\n                                {item.list.map((item1, index1) => {\r\n                                    return(\r\n                                        <div className=\"module\" key={item1 + index1}>\r\n                                            <div className=\"title\">\r\n                                                <span className=\"line\"></span>\r\n                                                <span className=\"title-name\">{item1.title}</span>\r\n                                                <span className=\"line rt\"></span>\r\n                                            </div>\r\n                                            <ul className=\"content\">\r\n                                            {item1.list.map((item2, index2) => {\r\n                                                return(\r\n                                                    <li key={item2 + index2} className=\"item\">\r\n                                                        <div className=\"imgs\">\r\n                                                        <img src={item2.img} alt=\"\" />\r\n                                                        </div>\r\n                                                        <div className=\"text\">\r\n                                                        <p>{item2.subTitle}</p>\r\n                                                        <div className=\"all-price\">\r\n                                                            <div>\r\n                                                            ￥<span>{item2.price}</span>\r\n                                                            </div>\r\n                                                            <div className=\"price\">\r\n                                                            ￥<span>{item2.oldPrice}</span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        </div>\r\n                                                    </li>\r\n                                                )\r\n                                            })}\r\n                                            </ul>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </Fragment>\r\n                        )}\r\n                    </Fragment>\r\n                    )\r\n                })}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default CategoryList;","import React, {Component } from 'react';\r\nimport \"../common/style/app.css\";\r\nimport AHeader from \"../components/header\";\r\nimport Footer from \"../components/footer\";\r\nimport CategoryList from \"../components/CategoryList\";\r\n\r\nclass Category extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            navList: [\r\n                { id: 1, name: \"女装\" },\r\n                { id: 2, name: \"男装\" },\r\n                { id: 3, name: \"鞋靴\" },\r\n                { id: 4, name: \"箱包\" },\r\n                { id: 5, name: \"童装玩具\" },\r\n                { id: 6, name: \"家电\" },\r\n                { id: 7, name: \"数码\" },\r\n                { id: 8, name: \"眼镜\" },\r\n                { id: 9, name: \"手表\" },\r\n                { id: 10, name: \"运动\" },\r\n                { id: 11, name: \"户外\" },\r\n                { id: 12, name: \"乐器\" },\r\n                { id: 13, name: \"游戏\" },\r\n                { id: 14, name: \"动漫\" },\r\n                { id: 15, name: \"影视\" },\r\n                { id: 16, name: \"鲜花\" },\r\n                { id: 17, name: \"美食\" },\r\n                { id: 18, name: \"建材\" },\r\n                { id: 19, name: \"家具\" },\r\n                { id: 20, name: \"汽车\" },\r\n                { id: 21, name: \"百货\" },\r\n                { id: 22, name: \"家庭保健\" },\r\n                { id: 23, name: \"学习\" },\r\n                { id: 24, name: \"宠物\" }\r\n              ],\r\n              id: 1 // 默认显示女装\r\n         }\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"category\">\r\n                <AHeader title=\"商品分类\" />\r\n                <div className=\"nav\">\r\n                    <div className=\"tab-nav\">\r\n                        <ul className=\"tab-ul\">\r\n                            {this.state.navList.map((item,index)=>{\r\n                                return(\r\n                                    <li className={item.id === this.state.id ? \"tab-li active\" : \"tab-li\"} key={item + index} onClick={this.checkNav.bind(this, item.id)}>\r\n                                        {item.name}\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <CategoryList id={this.state.id}/>\r\n                <Footer/>\r\n            </div>\r\n         );\r\n    }\r\n    checkNav(id){\r\n        this.setState({\r\n            id:id\r\n        })\r\n    }\r\n}\r\n \r\nexport default Category;","import axios from 'axios'\r\nimport QS from 'qs';\r\nimport { Toast } from 'antd-mobile';\r\nif (process.env.NODE_ENV === 'development') {\r\n    axios.defaults.baseURL = ' http://easy-mock.liuup.com/mock/5e7a1637b7eeed4e76fec766/myshop'\r\n} else if (process.env.NODE_ENV === 'production') {\r\n    axios.defaults.baseURL = ' http://easy-mock.liuup.com/mock/5e7a1637b7eeed4e76fec766/myshop'\r\n}\r\naxios.defaults.timeout = 10000;\r\n// 请求头信息是为post请求设置\r\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';\r\n  \r\n  // 请求拦截器\r\naxios.interceptors.request.use(\r\n    config => {\r\n        const token = \"store.state.token\"\r\n      // 每次发送请求之前判断是否存在token\r\n      // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况，此处token一般是用户完成登录后储存到localstorage里的\r\n      token && (config.headers.Authorization = token)\r\n      return config\r\n    },\r\n    error => {\r\n      return Promise.error(error)\r\n    })\r\n  // 响应拦截器\r\naxios.interceptors.response.use(response => {\r\n    // 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据\r\n    // 否则的话抛出错误\r\n    if (response.status === 200) {\r\n      if (response.data.code === 511) {\r\n        // 未授权调取授权接口\r\n      } else if (response.data.code === 510) {\r\n        // 未登录跳转登录页\r\n      } else {\r\n        return Promise.resolve(response)\r\n      }\r\n    } else {\r\n      return Promise.reject(response)\r\n    }\r\n  }, error => {\r\n    // 我们可以在这里对异常状态作统一处理\r\n    if (error.response.status) {            \r\n        switch (error.response.status) {                \r\n            // 401: 未登录\r\n            // 未登录则跳转登录页面，并携带当前页面的路径\r\n            // 在登录成功后返回当前页面，这一步需要在登录页操作。                \r\n            case 401:                    \r\n                // router.replace({                        \r\n                //     path: '/login',                        \r\n                //     query: { \r\n                //         redirect: router.currentRoute.fullPath \r\n                //     }\r\n                // });\r\n                break;\r\n\r\n            // 403 token过期\r\n            // 登录过期对用户进行提示\r\n            // 清除本地token和清空vuex中token对象\r\n            // 跳转登录页面                \r\n            case 403:\r\n                Toast.fail('登录过期，请重新登录',1)\r\n                // 清除token\r\n                // localStorage.removeItem('token');\r\n                // store.commit('loginSuccess', null);\r\n                // 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 \r\n                setTimeout(() => {                        \r\n                    // router.replace({                            \r\n                    //     path: '/login',                            \r\n                    //     query: { \r\n                    //         redirect: router.currentRoute.fullPath \r\n                    //     }                        \r\n                    // });                    \r\n                }, 1000);                    \r\n                break; \r\n\r\n            // 404请求不存在\r\n            case 404:\r\n                Toast.offline('Network connection failed !!!', 1);\r\n                break;\r\n            // 其他错误，直接抛出错误提示\r\n            default:\r\n                // Toast({\r\n                //     message: error.response.data.message,\r\n                //     duration: 1500,\r\n                //     forbidClick: true\r\n                // });\r\n        }\r\n        return Promise.reject(error.response);\r\n    }\r\n  })\r\n  \r\n\r\n/**\r\n * get方法，对应get请求\r\n * @param {String} url [请求的url地址]\r\n * @param {Object} params [请求时携带的参数]\r\n */\r\nexport function get(url, params){    \r\n    return new Promise((resolve, reject) =>{        \r\n        axios.get(url, {            \r\n            params: params        \r\n        }).then(res => {\r\n            resolve(res.data);\r\n        }).catch(err =>{\r\n            reject(err.data)        \r\n    })    \r\n});}\r\n\r\n\r\n/** \r\n * post方法，对应post请求 \r\n * @param {String} url [请求的url地址] \r\n * @param {Object} params [请求时携带的参数] \r\n */\r\nexport function post(url, params) {\r\n    return new Promise((resolve, reject) => {\r\n         axios.post(url, QS.stringify(params))\r\n        .then(res => {\r\n            resolve(res.data);\r\n        })\r\n        .catch(err =>{\r\n            reject(err.data)\r\n        })\r\n    });\r\n}\r\n\r\n\r\n/** \r\n * 请求失败后的错误统一处理 \r\n * @param {Number} status 请求失败的状态码\r\n */\r\nconst errorHandle = (status, other) => {\r\n    // 状态码判断\r\n    switch (status) {\r\n    // 401: 未登录状态，跳转登录页\r\n    case 401:\r\n        // toLogin();\r\n        break;\r\n    // 403 token过期\r\n    // 清除token并跳转登录页\r\n    case 403:\r\n        // tip('登录过期，请重新登录');\r\n        // localStorage.removeItem('token');\r\n        // store.commit('loginSuccess', null);\r\n        setTimeout(() => {\r\n            // toLogin();\r\n        }, 1000);\r\n        break;\r\n    // 404请求不存在\r\n    case 404:\r\n        // tip('请求的资源不存在'); \r\n        break;\r\n    default:\r\n        console.log(other);   \r\n}}","/**   \r\n * api接口统一管理\r\n */\r\nimport { get, post } from './server'\r\n// 轮播图\r\nexport const swipeList = (params) => post('/mock', params);\r\n\r\n// 活动列表\r\nexport const activeList = (params) => post('/mock', params);\r\n\r\n// 热卖单品\r\nexport const hotSaleList = (params) => post('/mock', params);\r\n\r\n// 导航栏\r\nexport const navList = (params) => post('/mock', params);\r\n\r\n// 分类页面\r\nexport const cateList = (params) => post('/mock', params);\r\n\r\n// 消息列表\r\nexport const linkList = (params) => post('/mock', params);\r\n// 消息列表2\r\nexport const chatList = (params) => post('/mock', params);"],"sourceRoot":""}